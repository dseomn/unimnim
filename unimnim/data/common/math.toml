# SPDX-FileCopyrightText: 2025 David Mandelberg <david@mandelberg.org>
#
# SPDX-License-Identifier: CC0-1.0 OR Apache-2.0

# This file combines base symbols from a mix of math and programming:
#
# "!": not
# "&": and
# "*": multiplication
# "+": addition
# "-": subtraction
# "/": division
# "<": less
# "=": equality
# ">": greater
# "^": xor
# "|": or
#
# With suffixes:
#
# "//": double-struck
# "O": circled
# "f": fraction
# "g": geometry
# "l": logic
# "n": n-ary
# "s": set
# "v": vector
#
# It also has a bunch of mnemonics that don't really belong, like Latin letters,
# because they're useful for combining.

prefix = "CM"

[base]
"+" = "U+002B PLUS SIGN: +"
"0" = "U+0030 DIGIT ZERO: 0"
"1" = "U+0031 DIGIT ONE: 1"
"2" = "U+0032 DIGIT TWO: 2"
"3" = "U+0033 DIGIT THREE: 3"
"4" = "U+0034 DIGIT FOUR: 4"
"5" = "U+0035 DIGIT FIVE: 5"
"6" = "U+0036 DIGIT SIX: 6"
"7" = "U+0037 DIGIT SEVEN: 7"
"8" = "U+0038 DIGIT EIGHT: 8"
"9" = "U+0039 DIGIT NINE: 9"
"<" = "U+003C LESS-THAN SIGN: <"
"=" = "U+003D EQUALS SIGN: ="
">" = "U+003E GREATER-THAN SIGN: >"
"lA" = "U+0041 LATIN CAPITAL LETTER A: A"  # based-on=latin
"lB" = "U+0042 LATIN CAPITAL LETTER B: B"  # based-on=latin
"lC" = "U+0043 LATIN CAPITAL LETTER C: C"  # based-on=latin
"lD" = "U+0044 LATIN CAPITAL LETTER D: D"  # based-on=latin
"lE" = "U+0045 LATIN CAPITAL LETTER E: E"  # based-on=latin
"lF" = "U+0046 LATIN CAPITAL LETTER F: F"  # based-on=latin
"lG" = "U+0047 LATIN CAPITAL LETTER G: G"  # based-on=latin
"lH" = "U+0048 LATIN CAPITAL LETTER H: H"  # based-on=latin
"lI" = "U+0049 LATIN CAPITAL LETTER I: I"  # based-on=latin
"lJ" = "U+004A LATIN CAPITAL LETTER J: J"  # based-on=latin
"lK" = "U+004B LATIN CAPITAL LETTER K: K"  # based-on=latin
"lL" = "U+004C LATIN CAPITAL LETTER L: L"  # based-on=latin
"lM" = "U+004D LATIN CAPITAL LETTER M: M"  # based-on=latin
"lN" = "U+004E LATIN CAPITAL LETTER N: N"  # based-on=latin
"lO" = "U+004F LATIN CAPITAL LETTER O: O"  # based-on=latin
"lP" = "U+0050 LATIN CAPITAL LETTER P: P"  # based-on=latin
"lQ" = "U+0051 LATIN CAPITAL LETTER Q: Q"  # based-on=latin
"lR" = "U+0052 LATIN CAPITAL LETTER R: R"  # based-on=latin
"lS" = "U+0053 LATIN CAPITAL LETTER S: S"  # based-on=latin
"lT" = "U+0054 LATIN CAPITAL LETTER T: T"  # based-on=latin
"lU" = "U+0055 LATIN CAPITAL LETTER U: U"  # based-on=latin
"lV" = "U+0056 LATIN CAPITAL LETTER V: V"  # based-on=latin
"lW" = "U+0057 LATIN CAPITAL LETTER W: W"  # based-on=latin
"lX" = "U+0058 LATIN CAPITAL LETTER X: X"  # based-on=latin
"lY" = "U+0059 LATIN CAPITAL LETTER Y: Y"  # based-on=latin
"lZ" = "U+005A LATIN CAPITAL LETTER Z: Z"  # based-on=latin
"la" = "U+0061 LATIN SMALL LETTER A: a"  # based-on=latin
"lb" = "U+0062 LATIN SMALL LETTER B: b"  # based-on=latin
"lc" = "U+0063 LATIN SMALL LETTER C: c"  # based-on=latin
"ld" = "U+0064 LATIN SMALL LETTER D: d"  # based-on=latin
"le" = "U+0065 LATIN SMALL LETTER E: e"  # based-on=latin
"lf" = "U+0066 LATIN SMALL LETTER F: f"  # based-on=latin
"lg" = "U+0067 LATIN SMALL LETTER G: g"  # based-on=latin
"lh" = "U+0068 LATIN SMALL LETTER H: h"  # based-on=latin
"li" = "U+0069 LATIN SMALL LETTER I: i"  # based-on=latin
"lj" = "U+006A LATIN SMALL LETTER J: j"  # based-on=latin
"lk" = "U+006B LATIN SMALL LETTER K: k"  # based-on=latin
"ll" = "U+006C LATIN SMALL LETTER L: l"  # based-on=latin
"lm" = "U+006D LATIN SMALL LETTER M: m"  # based-on=latin
"ln" = "U+006E LATIN SMALL LETTER N: n"  # based-on=latin
"lo" = "U+006F LATIN SMALL LETTER O: o"  # based-on=latin
"lp" = "U+0070 LATIN SMALL LETTER P: p"  # based-on=latin
"lq" = "U+0071 LATIN SMALL LETTER Q: q"  # based-on=latin
"lr" = "U+0072 LATIN SMALL LETTER R: r"  # based-on=latin
"ls" = "U+0073 LATIN SMALL LETTER S: s"  # based-on=latin
"lt" = "U+0074 LATIN SMALL LETTER T: t"  # based-on=latin
"lu" = "U+0075 LATIN SMALL LETTER U: u"  # based-on=latin
"lv" = "U+0076 LATIN SMALL LETTER V: v"  # based-on=latin
"lw" = "U+0077 LATIN SMALL LETTER W: w"  # based-on=latin
"lx" = "U+0078 LATIN SMALL LETTER X: x"  # based-on=latin
"ly" = "U+0079 LATIN SMALL LETTER Y: y"  # based-on=latin
"lz" = "U+007A LATIN SMALL LETTER Z: z"  # based-on=latin
"!l" = "U+00AC NOT SIGN: ¬"
"+-" = "U+00B1 PLUS-MINUS SIGN: ±"
"*" = "U+00D7 MULTIPLICATION SIGN: ×"
"/.." = "U+00F7 DIVISION SIGN: ÷"  # suboptimal
"gG" = "U+0393 GREEK CAPITAL LETTER GAMMA: Γ"  # based-on=greek
"gP" = "U+03A0 GREEK CAPITAL LETTER PI: Π"  # based-on=greek
"gg" = "U+03B3 GREEK SMALL LETTER GAMMA: γ"  # based-on=greek
"gp" = "U+03C0 GREEK SMALL LETTER PI: π"  # based-on=greek
"||" = "U+2016 DOUBLE VERTICAL LINE: ‖"
"/f" = "U+2044 FRACTION SLASH: ⁄"
"-.." = "U+2052 COMMERCIAL MINUS SIGN: ⁒"  # suboptimal
"ha" = "U+2135 ALEF SYMBOL: ℵ"  #  based-on=hebrew
"hv" = "U+2136 BET SYMBOL: ℶ"  #  based-on=hebrew
"hg" = "U+2137 GIMEL SYMBOL: ℷ"  #  based-on=hebrew
"hd" = "U+2138 DALET SYMBOL: ℸ"  #  based-on=hebrew
"FA" = "U+2200 FOR ALL: ∀"
"dp" = "U+2202 PARTIAL DIFFERENTIAL: ∂"
"TE" = "U+2203 THERE EXISTS: ∃"
"TE!" = "U+2204 THERE DOES NOT EXIST [precomposed]: ∄"
"0s" = "U+2205 EMPTY SET: ∅"
"in" = "U+2208 ELEMENT OF: ∈"
"has" = "U+220B CONTAINS AS MEMBER: ∋"
"has!" = "U+220C DOES NOT CONTAIN AS MEMBER [precomposed]: ∌"
"QED" = "U+220E END OF PROOF: ∎"  # aka="q.e.d."
"*n" = "U+220F N-ARY PRODUCT: ∏"
"+n" = "U+2211 N-ARY SUMMATION: ∑"
"-" = "U+2212 MINUS SIGN: −"
"-+" = "U+2213 MINUS-OR-PLUS SIGN: ∓"
"/" = "U+2215 DIVISION SLASH: ∕"
"-s" = "U+2216 SET MINUS: ∖"
"o" = "U+2218 RING OPERATOR: ∘"
"rt" = "U+221A SQUARE ROOT: √"
"rt3" = "U+221B CUBE ROOT: ∛"
"rt4" = "U+221C FOURTH ROOT: ∜"
"inf" = "U+221E INFINITY: ∞"
"/|" = "U+2223 DIVIDES: ∣"
"/|!" = "U+2224 DOES NOT DIVIDE [precomposed]: ∤"
"||g" = "U+2225 PARALLEL TO: ∥"
"&l" = "U+2227 LOGICAL AND: ∧"
"|l" = "U+2228 LOGICAL OR: ∨"
"&s" = "U+2229 INTERSECTION: ∩"
"|s" = "U+222A UNION: ∪"
"int" = "U+222B INTEGRAL: ∫"
"int2" = "U+222C DOUBLE INTEGRAL: ∬"
"int3" = "U+222D TRIPLE INTEGRAL: ∭"
"/:" = "U+2236 RATIO: ∶"  # suboptimal
"~" = "U+223C TILDE OPERATOR: ∼"
"~=" = "U+2243 ASYMPTOTICALLY EQUAL TO: ≃"
"~==" = "U+2245 APPROXIMATELY EQUAL TO: ≅"
"~~" = "U+2248 ALMOST EQUAL TO: ≈"
"~~=" = "U+224A ALMOST EQUAL OR EQUAL TO: ≊"
"~~~" = "U+224B TRIPLE TILDE: ≋"
"def=" = "U+225D EQUAL TO BY DEFINITION: ≝"
"?=" = "U+225F QUESTIONED EQUAL TO: ≟"
"=!" = "U+2260 NOT EQUAL TO [precomposed]: ≠"
"==" = "U+2261 IDENTICAL TO: ≡"
"===" = "U+2263 STRICTLY EQUIVALENT TO: ≣"
"<=" = "U+2264 LESS-THAN OR EQUAL TO: ≤"
">=" = "U+2265 GREATER-THAN OR EQUAL TO: ≥"
"<<" = "U+226A MUCH LESS-THAN: ≪"
">>" = "U+226B MUCH GREATER-THAN: ≫"
"<~" = "U+2272 LESS-THAN OR EQUIVALENT TO: ≲"
">~" = "U+2273 GREATER-THAN OR EQUIVALENT TO: ≳"
"<>" = "U+2276 LESS-THAN OR GREATER-THAN: ≶"
"><" = "U+2277 GREATER-THAN OR LESS-THAN: ≷"
"<s" = "U+2282 SUBSET OF: ⊂"
">s" = "U+2283 SUPERSET OF: ⊃"
"<=s" = "U+2286 SUBSET OF OR EQUAL TO: ⊆"
">=s" = "U+2287 SUPERSET OF OR EQUAL TO: ⊇"
"<=s!" = "U+2288 NEITHER A SUBSET OF NOR EQUAL TO [precomposed]: ⊈"
">=s!" = "U+2289 NEITHER A SUPERSET OF NOR EQUAL TO [precomposed]: ⊉"
"<=!s" = "U+228A SUBSET OF WITH NOT EQUAL TO: ⊊"  # suboptimal
">=!s" = "U+228B SUPERSET OF WITH NOT EQUAL TO: ⊋"  # suboptimal
"*O" = "U+2297 CIRCLED TIMES: ⊗"
"^l" = "U+22BB XOR: ⊻"
"!&l" = "U+22BC NAND: ⊼"
"!|l" = "U+22BD NOR: ⊽"
"*." = "U+22C5 DOT OPERATOR: ⋅"
"<<<" = "U+22D8 VERY MUCH LESS-THAN: ⋘"
">>>" = "U+22D9 VERY MUCH GREATER-THAN: ⋙"
">[" = "U+2308 LEFT CEILING: ⌈"  # logical-order
">]" = "U+2309 RIGHT CEILING: ⌉"  # logical-order
"<[" = "U+230A LEFT FLOOR: ⌊"  # logical-order
"<]" = "U+230B RIGHT FLOOR: ⌋"  # logical-order
"/)" = "U+27CC LONG DIVISION: ⟌"
"int4" = "U+2A0C QUADRUPLE INTEGRAL OPERATOR: ⨌"
"*v" = "U+2A2F VECTOR OR CROSS PRODUCT: ⨯"

[combining.name_regex_replace]
"!" = [
  ['.*', 'NOT \g<0>'],
  ['.*', 'NOT A \g<0>'],
  ['.*', 'NOT AN \g<0>'],
  ['(.*) (?:OPERATOR|SIGN)', 'NOT \g<1>'],
  ['(.*) OR (.*)', 'NEITHER \g<1> NOR \g<2>'],
]
"//" = [
  ['.*', 'DOUBLE-STRUCK \g<0>'],
  ['.*', 'MATHEMATICAL DOUBLE-STRUCK \g<0>'],
  ['(?:LATIN|GREEK) (CAPITAL|SMALL) LETTER (.*)', 'DOUBLE-STRUCK \g<1> \g<2>'],
  ['LATIN (CAPITAL|SMALL) LETTER (.*)', 'MATHEMATICAL DOUBLE-STRUCK \g<1> \g<2>'],
]
"O" = [
  ['(?!(?:LATIN|GREEK) ).*', 'CIRCLED \g<0>'],
  ['(.*) SIGN', 'CIRCLED \g<1>'],
]
"n" = [
  ['.*', 'N-ARY \g<0>'],
  ['.*', 'N-ARY \g<0> OPERATOR'],
]
